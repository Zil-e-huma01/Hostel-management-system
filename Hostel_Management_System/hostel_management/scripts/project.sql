CREATE TABLE employeesP (
    employeeID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    firstName VARCHAR2(50),
    lastName VARCHAR2(50),
    gender VARCHAR2(10),
    cnic VARCHAR2(15),
    fatherName VARCHAR2(50),
    fatherCnic VARCHAR2(15),
    dateOfBirth DATE,
    age NUMBER,
    postalAddress VARCHAR2(255),
    permanentAddress VARCHAR2(255),
    contactNo VARCHAR2(15),
    email VARCHAR2(100),
    password VARCHAR2(50),
    designation VARCHAR2(50),
    PRIMARY KEY (employeeID),
    UNIQUE (email)
);

-- Create trigger for generating email and password
CREATE OR REPLACE TRIGGER employeesP_email_password_trigger
BEFORE INSERT ON employeesP
FOR EACH ROW
BEGIN
    :NEW.email := INITCAP(:NEW.firstName) || '.' || INITCAP(:NEW.lastName) || '.' || TO_CHAR(:NEW.employeeID) || '@hostel.com';
    :NEW.password := INITCAP(:NEW.firstName) || '@123';
END;


INSERT INTO employeesP (
    firstName,lastName,gender,cnic,fatherName,fatherCnic,dateOfBirth,age,postalAddress,permanentAddress,
    contactNo,designation
) VALUES ('John','Doe','Male','12345-1234567-1','John Doe Sr.','12345-1234567-2',
    TO_DATE('1990-01-15', 'YYYY-MM-DD'),
    FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('1990-01-15', 'YYYY-MM-DD')) / 12),
    '123 Main St','456 Park Ave','1234567890123','Admin'
);
INSERT INTO employeesP (
    firstName,lastName,gender,cnic,fatherName,fatherCnic,dateOfBirth,age,postalAddress,permanentAddress,
    contactNo,designation
) VALUES ('ahmed','ali','Male','12345-567878-1','ahmed ali Sr.','12345-8989667-2',
    TO_DATE('1995-01-15', 'YYYY-MM-DD'),
    FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('1995-01-15', 'YYYY-MM-DD')) / 12),
    '123 Main St','567 Park Ave','1234567890123','manager'
);


SELECT * FROM employeesP ;


ALTER TABLE employeesP
ADD employeeImage BLOB;

CREATE TABLE managers (
email varchar(50),
password varchar(50),
designation varchar(50));

insert into managers(email,password,designation) VALUES ('alisha','1122','manager');
CREATE TABLE Resident (
    resident_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    room_number INT
);

-- Create RoomOccupancy table
CREATE TABLE RoomOccupancy (
    room_number INT PRIMARY KEY,
    resident_id INT,
    check_in_date DATE,
    check_out_date DATE,
     FOREIGN KEY (resident_id) REFERENCES Resident(resident_id)
);

-- Create Facilities table
CREATE TABLE Facilities (
    facility_id INT PRIMARY KEY,
    facility_name VARCHAR(50),
    facility_detail varchar(50)
    );

-- Create Reports table
CREATE TABLE Reports (
    report_id INT PRIMARY KEY,
    resident_id INT,
    report_text varchar(50),
    report_date DATE,

    FOREIGN KEY (resident_id) REFERENCES Resident(resident_id)
);

-- Retrieve all students
SELECT * FROM Resident;

-- Retrieve room occupancy details
SELECT * FROM RoomOccupancy;

-- Retrieve facilities
SELECT * FROM Facilities;

-- Retrieve reports for a specific student
SELECT * FROM Reports WHERE resident_id = 123;

-- Add a new student
INSERT INTO Resident (resident_id, first_name, last_name, room_number) VALUES (1, 'John', 'Doe', 101);

-- Update room number for a student
UPDATE Resident SET room_number = 102 WHERE resident_id = 1;


-- Create a view to retrieve student details with room occupancy and reports
CREATE OR REPLACE VIEW ResidentOverview AS
SELECT
    S.resident_id,
    S.first_name,
    S.last_name,
    S.room_number,
    RO.check_in_date,
    RO.check_out_date,
    R.report_text,
    R.report_date
FROM Resident S
LEFT JOIN RoomOccupancy RO ON S.resident_id = RO.resident_id
LEFT JOIN Reports R ON S.resident_id = R.resident_id;


-- Delimiter /
CREATE OR REPLACE PROCEDURE AddResidentWithOccupancy(
    p_resident_id INT,
    p_first_name VARCHAR(50),
    p_last_name VARCHAR(50),
    p_room_number INT,
    p_check_in_date DATE,
    p_check_out_date DATE
)
IS
BEGIN
    INSERT INTO Resident (resident_id, first_name, last_name, room_number)
    VALUES (p_resident_id, p_first_name, p_last_name, p_room_number);
    INSERT INTO RoomOccupancy (resident_id, check_in_date, check_out_date)
    VALUES (p_resident_id, p_check_in_date, p_check_out_date);
END;

-- Create a trigger to generate a report when a new student is added
CREATE OR REPLACE TRIGGER AfterInsertResident
AFTER INSERT ON Resident
FOR EACH ROW
BEGIN
    -- Insert a default report for the new resident
    INSERT INTO Reports (resident_id, report_text, report_date)
    VALUES (:NEW.resident_id, 'Welcome to the hostel!', SYSTIMESTAMP);
END;
